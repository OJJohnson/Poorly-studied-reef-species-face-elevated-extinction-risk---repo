#desired_order <- c("Macroalgae", "Coral", "Invertebrate", "Vertebrate")
#ENDEMICS
all_species_endemic <- trending_species %>%
filter(endemism == "endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
all_species_endemic  %>%
count(taxon, IUCN, new, species_name) %>%
mutate(new = factor(new, levels = c("Endangered", "Vulnerable", "Near Threatened", "Least Concern", "Lower Risk/conservation dependent"))) %>%
mutate(taxon = case_when(taxon == "Vertebrate" ~ "d) Fishes",
taxon == "Invertebrate" ~ "c) Mobile macro-invertebrates",
taxon == "Macroalgae" ~ "a) Macroalgae",
taxon == "Coral" ~ "b) Corals")) %>%
mutate(taxon = factor(taxon, levels = c("a) Macroalgae", "b) Corals", "c) Mobile macro-invertebrates", "d) Fishes"))) %>%
ggplot(aes(x = IUCN, y = n, fill = new)) +
geom_col() +
facet_wrap(~taxon, ncol = 1,scales = "free_y") +
labs(x = "IUCN Red List Conservation Status",
y = "Species Count",
fill = "Population trend") +
scale_fill_manual(
values = c("Critically Endangered" = "red", "Endangered" = "orange", "Vulnerable" = "yellow", "Near Threatened" = "#cccc33", "Least Concern" = "green3"),
breaks = c("Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Least Concern")) +
# scale_x_discrete(limits = c("Not Evaluated", "Data Deficient", "Near Threatened", "Least Concern", "Vulnerable", "Endangered")) +
scale_x_discrete(limits = c("Not Evaluated", "Data Deficient", "Least Concern","Near Threatened",  "Vulnerable", "Endangered")) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.position = "right",
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
strip.text = element_text(size = 11, hjust = 0),
axis.title.y = element_text(margin = margin(r = 20)),
strip.text.x = element_text(margin = margin(b = 10)),
strip.text.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(r = 40, t = 20))
)
#NON-ENDEMICS
#Specify order of facet panels in plots
#desired_order <- c("Macroalgae", "Coral", "Invertebrate", "Vertebrate")
all_species_non_endemic <- trending_species %>%
filter(endemism == "non-endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
all_species_non_endemic %>%
count(taxon, IUCN, new, species_name) %>%
mutate(new = factor(new, levels = c("Endangered", "Vulnerable", "Near Threatened", "Least Concern"))) %>%
mutate(taxon = case_when(taxon == "Vertebrate" ~ "d) Fishes",
taxon == "Invertebrate" ~ "c) Mobile macro-invertebrates",
taxon == "Macroalgae" ~ "a) Macroalgae",
taxon == "Coral" ~ "b) Corals")) %>%
mutate(taxon = factor(taxon, levels = c("a) Macroalgae", "b) Corals", "c) Mobile macro-invertebrates", "d) Fishes"))) %>%
ggplot(aes(x = IUCN, y = n, fill = new)) +
geom_col() +
facet_wrap(~taxon, ncol = 1,scales = "free_y") +
labs(x = "IUCN Red List Conservation Status",
y = "Species Count",
fill = "Population trend") +
scale_fill_manual(
values = c("Critically Endangered" = "red", "Endangered" = "orange", "Vulnerable" = "yellow", "Near Threatened" = "#cccc33", "Least Concern" = "green3"),
breaks = c("Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Least Concern")) +
# scale_x_discrete(limits = c("Not Evaluated", "Lower Risk/conservation dependent", "Data Deficient", "Least Concern", "Near Threatened", "Vulnerable", "Endangered")) +
scale_x_discrete(limits = c("Not Evaluated",  "Data Deficient", "Lower Risk/conservation dependent","Least Concern", "Near Threatened", "Vulnerable", "Endangered")) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.position = "right",
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
strip.text = element_text(size = 11, hjust = 0),
axis.title.y = element_text(margin = margin(r = 20)),
strip.text.x = element_text(margin = margin(b = 10)),
strip.text.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(r = 40, t = 20))
)
write_csv(all_species_non_endemic, "all_species_non_endemic.csv")
library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("ggspatial")
library("ozmaps")
library("rnaturalearthhires")
View(trending_species)
algae_data <- read_csv("algae_data_2024.csv", show_col_types = FALSE)
fish_data <- read_csv("fish_data_2024.csv", show_col_types = FALSE)
inverts_data <- read_csv("inverts_data_2024.csv", show_col_types = FALSE)
coral_data <- read_csv("coral_data_2024.csv", show_col_types = FALSE)
#algae
algae_lats_longs_clean <- data.frame(Latitude = algae_data$latitude, Longitude = algae_data$longitude)
#fish
fish_lats_longs_clean <- data.frame(Latitude = fish_data$latitude, Longitude = fish_data$longitude)
#inverts
inverts_lats_longs_clean <- data.frame(Latitude = inverts_data$latitude, Longitude = inverts_data$longitude)
#coral
coral_lats_longs_clean <- data.frame(Latitude = coral_data$latitude, Longitude = coral_data$longitude)
# Combine latitude and longitude tables for algae, fish, inverts, and coral
all_lats_longs_clean <- bind_rows(algae_lats_longs_clean, fish_lats_longs_clean, inverts_lats_longs_clean, coral_lats_longs_clean)
#RAW data map
coordinates <- all_lats_longs_clean
#how many sites in total are on this map?
unique_species_count <- length(unique(coordinates$Latitude))
unique_species_count
# Create a simple world map for context
world <- ne_countries(scale = "medium", returnclass = "sf")
oz_states <- ne_states(country = "Australia", returnclass = "sf")
#how many sites in total are on this map?
unique_species_count <- length(unique(coordinates$Latitude))
unique_species_count
# Create a simple world map for context
world <- ne_countries(scale = "medium", returnclass = "sf")
oz_states <- ne_states(country = "Australia", returnclass = "sf")
# Plot the map with your data points
ggplot(data = world) +
geom_sf(data = oz_states) +
geom_point(data = coordinates, aes(x = Longitude, y = Latitude), color = "deepskyblue") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(110.00, 160.00), ylim = c(-45.00, -8.00), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.3, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw(base_size = 8)
View(coordinates)
View(filtered_species_declining)
View(algae_data)
# Create a matrix with your data
data <- matrix(c(196, 165, 225, 314), nrow = 2)
# Attach row and column names
rownames(data) <- c("Threatened", "Non-Threatened")
colnames(data) <- c("Endemic", "Non-Endemic")
# Print the data
print(data)
# Perform the chi-squared test
result <- chisq.test(data)
# Print the result
print(result)
# Extract and print the p-value
p_value <- result$p.value
print(p_value)
# Interpret the result
if (p_value < 0.05) {
cat("There is a significant association between endemism status and threatened status.\n")
} else {
cat("There is no significant association between endemism status and threatened status.\n")
}
View(result)
View(result)
# Create a matrix with your data
data <- matrix(c(68, 57, 66, 122), nrow = 2)
# Attach row and column names
rownames(data) <- c("Threatened", "Non-Threatened")
colnames(data) <- c("Endemic", "Non-Endemic")
# Print the data
print(data)
# Perform the chi-squared test
result <- chisq.test(data, correct = FALSE)
# Print the result
print(result)
# Extract and print the p-value
p_value <- result$p.value
print(p_value)
# Interpret the result
if (p_value < 0.05) {
cat("There is a significant association between endemism status and threatened status.\n")
} else {
cat("There is no significant association between endemism status and threatened status.\n")
}
#| include = FALSE
library(knitr)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# save csv files for each step?
save_csv <- TRUE
library(knitr)
library(tidyverse)
library(janitor)
library(lubridate)
library(lme4)
library(lmerTest)
library(zoo, include.only = "na.approx")
library(ggforce, include.only = "facet_col")
# "not in" function
`%!in%` <- Negate(`%in%`)
algae_data <- read_csv("algae_data_2024.csv", show_col_types = FALSE)
fish_data <- read_csv("fish_data_2024.csv", show_col_types = FALSE)
inverts_data <- read_csv("inverts_data_2024.csv", show_col_types = FALSE)
coral_data <- read_csv("coral_data_2024.csv", show_col_types = FALSE)
#Species-level information
species_tbl <-
read_csv(file = "species_info.csv",
show_col_types = FALSE,
skip_empty_rows = TRUE)
#Temperature time-series (post-2008) data for each site
temperature_raw <-
read_csv(file =  "temperature_timeseries.csv",
show_col_types = FALSE,
skip_empty_rows = TRUE)
#Endemism dataframe
endemism <-
read_csv(file =  "endemism.csv",
show_col_types = FALSE,
skip_empty_rows = TRUE)
result_algae <- tibble(
species_name = character(),
slope = numeric(),
intercept = numeric(),
p_value = numeric(),
ci_low = numeric(),
ci_high = numeric(),
se = numeric(),
sd_residuals = numeric(),
aic = numeric(),
bic = numeric(),
error_flag = character()  # New column to track the error flag
)
###add in check of minimum number of years and observations for individual species (add to supplementary material)
algae_data %>%
select(species_name, survey_year) %>%
distinct() %>%
mutate(range_yrs = max(survey_year)-min(survey_year),
.by = species_name) %>%
count(species_name, range_yrs)
for (i in unique(algae_data$species_name)) {
mod_data_algae <-
algae_data %>%
filter(species_name == i)
# Check the number of unique levels of site_code for each species_name
unique_levels <- n_distinct(algae_data$site_code)
if (unique_levels <= 1) {
warning(paste("Species", i, "has only one level of site_code. Consider using a different grouping variable."))
next  # Skip to the next iteration
}
tryCatch({
algae_model <-
lmerTest::lmer(sqrt_cover ~ survey_year + (1|site_code),
data = mod_data_algae)
intercept <- lme4::fixef(algae_model)[1] %>% as.numeric()
slope <- lme4::fixef(algae_model)[2] %>% as.numeric()
# Check if the model has a singular fit
if (isSingular(algae_model)) {
error_flag <- "Singular Fit"  # Set the error flag
} else {
error_flag <- ""  # No error flag
# Extracting p-value
p_value <- summary(algae_model)$coefficients[2, "Pr(>|t|)"]
ci <- confint(algae_model, "survey_year")
ci_low <- ci[1]
ci_high <- ci[2]
se <- summary(algae_model)$coefficients[2, "Std. Error"]
sd_residuals <- summary(algae_model)$sigma
aic <- AIC(algae_model)
bic <- BIC(algae_model)
}
output <- summary(object = algae_model)
result_algae <-
result_algae %>%
add_row(species_name = i,
slope = slope,
intercept = intercept,
p_value = p_value,
ci_low = ci_low,
ci_high = ci_high,
se = se,
sd_residuals = sd_residuals,
aic = aic,
bic = bic,
error_flag = error_flag) %>%
mutate(sig = case_when(p_value <= 0.001 ~ "***",
p_value <= 0.01  ~ "**",
p_value <= 0.05  ~ "*",
TRUE ~ ""))   }, error = function(e) {
cat("Error occurred for species:", i, "\n")
cat("Error message:", conditionMessage(e), "\n")
})
# print(summary(algae_model))
}
# Liv's previous comment:
#Model runs and produces results for 246 of the algae species - multiple species are having the error "boundary (singular) fit: see help('isSingular')" indicating there is a convergence issue with that species. Upon inspection of a few of the species where this error occurs in the model, there are only a very limited number of positive observations (>3 as set in the minimum parameters) in the data suggesting this could be causing issues in the algorithm's ability to find the optimal estimates of the model parameters.
result_fish <- tibble(
species_name = character(),
slope = numeric(),
intercept = numeric(),
p_value = numeric(),
ci_low = numeric(),
ci_high = numeric(),
se = numeric(),
sd_residuals = numeric(),
aic = numeric(),
bic = numeric(),
error_flag = character()  # New column to track the error flag
)
###add in check of minimum number of years and observations for individual species (add to supplementary material)
fish_data %>%
select(species_name, survey_year) %>%
distinct() %>%
mutate(range_yrs = max(survey_year)-min(survey_year),
.by = species_name) %>%
count(species_name, range_yrs)
for (i in unique(fish_data$species_name)) {
mod_data_fish <-
fish_data %>% filter(species_name == i)
#
# # Check the number of unique levels of site_code for each species_name
#   unique_levels <- n_distinct(mod_data_fish$site_code)
#
#
#   if (unique_levels <= 1) {
#     warning(paste("Species", i, "has only one level of site_code. Consider using a different grouping variable."))
#     next  # Skip to the next iteration
#   }
tryCatch({fish_model <-
lmerTest::lmer(log_count ~ year + (1|site_code), data = mod_data_fish)
intercept <- lme4::fixef(fish_model)[1] %>% as.numeric()
slope <- lme4::fixef(fish_model)[2] %>% as.numeric()
# print(i)
# Check if the model has a singular fit
if (isSingular(fish_model)) {
error_flag <- "Singular Fit"  # Set the error flag
} else {
error_flag <- ""  # No error flag
# Extracting p-value
p_value <- summary(fish_model)$coefficients[2, "Pr(>|t|)"]
ci <- confint(fish_model, "year")
ci_low <- ci[1]
ci_high <- ci[2]
se <- summary(fish_model)$coefficients[2, "Std. Error"]
sd_residuals <- summary(fish_model)$sigma
aic <- AIC(fish_model)
bic <- BIC(fish_model)
}
output <- summary(object = fish_model)
result_fish <- result_fish %>%
add_row(species_name = i,
slope = slope,
intercept = intercept,
p_value = p_value,
ci_low = ci_low,
ci_high = ci_high,
se = se,
sd_residuals = sd_residuals,
aic = aic,
bic = bic,
error_flag = error_flag) %>%
mutate(sig = case_when(p_value <= 0.001 ~ "***",
p_value <= 0.01  ~ "**",
p_value <= 0.05  ~ "*",
TRUE ~ ""))  }, error = function(e) {
cat("Error occurred for species:", i, "\n")
cat("Error message:", conditionMessage(e), "\n")
})
#print(summary(fish_model))
}
result_inverts <- tibble(
species_name = character(),
slope = numeric(),
intercept = numeric(),
p_value = numeric(),
ci_low = numeric(),
ci_high = numeric(),
se = numeric(),
sd_residuals = numeric(),
aic = numeric(),
bic = numeric(),
error_flag = character()  # New column to track the error flag
)
###add in check of minimum number of years and observations for individual species (add to supplementary material)
inverts_data %>%
select(species_name, survey_year) %>%
distinct() %>%
mutate(range_yrs = max(survey_year)-min(survey_year),
.by = species_name) %>%
count(species_name, range_yrs)
for (i in unique(inverts_data$species_name)) {
mod_data_inverts <-
inverts_data %>%
filter(species_name == i)
# Check the number of unique levels of site_code for each species_name
unique_levels <- n_distinct(inverts_data$site_code)
if (unique_levels <= 1) {
warning(paste("Species", i, "has only one level of site_code. Consider using a different grouping variable."))
next  # Skip to the next iteration
}
# Fit the mixed-effects model
tryCatch({inverts_model <- lmerTest::lmer(log_count ~ survey_year + (1|site_code), data = mod_data_inverts)
intercept <- lme4::fixef(inverts_model)[1] %>% as.numeric()
slope <- lme4::fixef(inverts_model)[2] %>% as.numeric()
# print(i)
# Check if the model has a singular fit
if (isSingular(inverts_model)) {
error_flag <- "Singular Fit"  # Set the error flag
} else {
error_flag <- ""  # No error flag
# Extracting p-value
p_value <- summary(inverts_model)$coefficients[2, "Pr(>|t|)"]
ci <- confint(inverts_model, "survey_year")
ci_low <- ci[1]
ci_high <- ci[2]
se <- summary(inverts_model)$coefficients[2, "Std. Error"]
sd_residuals <- summary(inverts_model)$sigma
aic <- AIC(inverts_model)
bic <- BIC(inverts_model)
}
output <- summary(object = inverts_model)
result_inverts <- result_inverts %>%
add_row(species_name = i, slope = slope,
intercept = intercept,
p_value = p_value,
ci_low = ci_low,
ci_high = ci_high,
se = se,
sd_residuals = sd_residuals,
aic = aic,
bic = bic,
error_flag = error_flag) %>%
mutate(sig = case_when(p_value <= 0.001 ~ "***",
p_value <= 0.01  ~ "**",
p_value <= 0.05  ~ "*",
TRUE ~ "")) }, error = function(e) {
cat("Error occurred for species:", i, "\n")
cat("Error message:", conditionMessage(e), "\n")
})
# print(summary(inverts_model))
}
result_coral <- tibble(
species_name = character(),
slope = numeric(),
intercept = numeric(),
p_value = numeric(),
ci_low = numeric(),
ci_high = numeric(),
se = numeric(),
sd_residuals = numeric(),
aic = numeric(),
bic = numeric(),
error_flag = character()  # New column to track the error flag
)
###add in check of minimum number of years and observations for individual species (add to supplementary material)
coral_data %>%
select(species_name, survey_year) %>%
distinct() %>%
mutate(range_yrs = max(survey_year)-min(survey_year),
.by = species_name) %>%
count(species_name, range_yrs)
for (i in unique(coral_data$species_name)) {
mod_data_coral <- coral_data %>% filter(species_name == i)
# Check the number of unique levels of site_code for each species_name
unique_levels <- n_distinct(coral_data$site_code)
if (unique_levels <= 1) {
warning(paste("Species", i, "has only one level of site_code. Consider using a different grouping variable."))
next  # Skip to the next iteration
}
# Fit the mixed-effects model
tryCatch({coral_model <- lmerTest::lmer(sqrt_pcover ~ survey_year + (1|site_code), data = mod_data_coral)
intercept <- lme4::fixef(coral_model)[1] %>% as.numeric()
slope <- lme4::fixef(coral_model)[2] %>% as.numeric()
# print(i)
# Check if the model has a singular fit
if (isSingular(coral_model)) {
error_flag <- "Singular Fit"  # Set the error flag
} else {
error_flag <- ""  # No error flag
# Extracting p-value
p_value <- summary(coral_model)$coefficients[2, "Pr(>|t|)"]
ci <- confint(coral_model, "survey_year")
ci_low <- ci[1]
ci_high <- ci[2]
se <- summary(coral_model)$coefficients[2, "Std. Error"]
sd_residuals <- summary(coral_model)$sigma
aic <- AIC(coral_model)
bic <- BIC(coral_model)
}
output <- summary(object = coral_model)
result_coral <- result_coral %>%
add_row(species_name = i, slope = slope,
intercept = intercept,
p_value = p_value,
ci_low = ci_low,
ci_high = ci_high,
se = se,
sd_residuals = sd_residuals,
aic = aic,
bic = bic,
error_flag = error_flag) %>%
mutate(sig = case_when(p_value <= 0.001 ~ "***",
p_value <= 0.01  ~ "**",
p_value <= 0.05  ~ "*",
TRUE ~ ""))
}, error = function(e) {
cat("Error occurred for species:", i, "\n")
cat("Error message:", conditionMessage(e), "\n")
})
# print(summary(coral_model))
}
View(result_inverts)
View(result_algae)
citation()
